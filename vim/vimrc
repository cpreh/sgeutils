call pathogen#infect()
call pathogen#helptags()


filetype plugin on

" Settings
"se tabstop=2
"se shiftwidth=2
se enc=utf-8
se fenc=utf-8
se termencoding=utf-8
" Ignore case while searching
se ignorecase
" Match [] with %, too
se matchpairs=(:),{:},[:]
" Store swap files in this directory
se directory=~/.vim/tmp
se smartcase
" Searches do not wrap
se nowrapscan
se nosmartindent
" Use cindent (powerful!)
se cindent
" This is just for gvim. a autoyanks everything in the 'v' mode
se guioptions=a
se wildmenu
se wildmode=longest,list
se scrolloff=3
se listchars=tab:>-,trail:Â·,eol:$
se hidden
" I removed 'r' because that adds an asterisk at the beginning of doxygen
" comments
se formatoptions=ql
" Somewhat sge style indentation
se cino=c0,C1,g0,N-s,(s,p0,t0,)100,u0,+0
se cinkeys=0{,0},0),:,0#,!^F,o,O,e,0<,0>
" Adjust comments
autocmd FileType c,cpp,objc,objcpp set comments=sl:/*,m:\ ,e:*/,://


" The mapleader key is used by some plugins as a shortcut in they keyboard
" mappings. The standard is \
let mapleader = ','


" Mappings
map <C-x><C-f> :CommandT<CR>
" F keys
map <F1> :ErrorAtCursor<CR>
map <F2> :make!<CR>
map <F3> :FSHere<CR>
map <F4> :!xterm<CR>
map <F5> :r !/home/philipp/.vim/suggest %<CR>
map <F7> :0r! /home/philipp/projects/sgeutils/sgebuild_clang/bin/generate_includeguard %:p<CR>:1<CR>
"map <F9> :OpenIncludePath<CR>
"map <F10> :InsertIncludeDirective<CR>
map <up> :cp<CR>
map <down> :cn<CR>
map <C-h> 5h
map <C-j> 5j
map <C-k> 5k
map <C-l> 5l
map <C-i> :AddIncludeLine<CR>
" Disable the pesky command line window
map q: <nop>
nnoremap <Leader>e :e <C-r>=expand('%:p:h')<CR>
nnoremap <Leader>s :sp <C-r>=expand('%:p:h')<CR>
nnoremap <Leader>v :vsp <C-r>=expand('%:p:h')<CR>
nnoremap <Leader>r :r <C-r>=expand('%:p:h')<CR>

" Syntax files
au BufNewFile,BufRead *.tex,*.latex se tw=80
au BufNewFile,BufRead *.cl set ft=opencl

au BufNewFile,BufRead *.cg se ft=cg

se makeprg=ninja

au! BufEnter *.cpp let b:fswitchdst = 'hpp,h' | let b:fswitchlocs = 'reg:/src/include/'
au! BufEnter *.hpp let b:fswitchdst = 'cpp,c' | let b:fswitchlocs = 'reg:/include/src/'
au VimResized * wincmd =

"au BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl SetGLSLFileType
au! BufRead,BufNewFile *.json se ft=json
au! BufRead,BufNewFile *.doxygen se ft=doxygen

" This is supposed to be faster, but it crashes
"let g:clang_use_library = 0
let g:clang_library_path = '/home/philipp/Programming/research/llvm/build/lib/'
let g:clang_complete_copen = 1
let g:clang_snippets = 1
let g:clang_snippets_engine = 'snipmate'
"let g:clang_library_path = '/usr/lib64/llvm'
"let g:clang_library_path = '/home/philipp/.vim/bundle/clang_complete_new/'
let g:inccomplete_showdirs = 1
"let g:inccomplete_addclosebracket = 'never'
let g:inccomplete_findcmd = '/usr/bin/find'
"set completeopt=longest,menuone
set completeopt=longest

" Press space to unsearch something
noremap <silent> <Space> :silent noh<Bar>echo<CR>

let g:ideone_open_browser_after_post = 1
let g:ideone_browser_command = 'firefox %URL%'

" Highlight trailing whitespace and leading (non-tab) whitespace
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
"autocmd BufEnter * match ExtraWhitespace /\s\+$/ | 2match ExtraWhitespace /^ \+/
autocmd BufEnter * match ExtraWhitespace /\s\+$/

set background=dark
colorscheme zenburn

let g:QSMatchFn = "fuzzy"

au BufNewFile,BufRead *.cpp set syntax=cpp11

noremap <leader>y "*y
noremap <leader>yy "*Y

noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>
